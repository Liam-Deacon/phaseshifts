[project]
name = "phaseshifts"
version = "0.1.8"
description = "Python-based version of the Barbieri/Van Hove phase shift calculation package for LEED/XPD modelling"
authors = [
    { name = "Liam Deacon", email = "liam.m.deacon@gmail.com" }
]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=2.7"  # TODO: Update to >=3.8 when dropping Python 2 support
dependencies = [
    "numpy>=1.3",
    "scipy>=0.7",
    "periodictable",
    "typing_extensions"
]
keywords = [
    "phaseshifts",
    "atomic scattering",
    "muffin-tin",
    "diffraction"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Environment :: X11 Applications :: Qt",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Physics"
]

[project.scripts]
phaseshifts = "phaseshifts.cli:main"

[project.optional-dependencies]
atorb = [
    "mendeleev",
    "elementy"
]
gui = [
    "six",
    "qtpy",
    "pyqt5; python_version < '3.7'",
    "pyside6; python_version >= '3.7'",
    "pyqtgraph"
]
dev = [
    "black",
    "isort",
    "numpy",
    "pre-commit",
    "ruff",
    "scikit-build-core; python_version > '3.11'",
    "wheel"
]
test = [
    "pytest",
    "pytest-cov"
]
docs = [
    "sphinx>=7,<8",
    "sphinx_rtd_theme",
    "numpydoc",
    "ipykernel"
]

[build-system]
requires = [
    "scikit-build-core>=0.11.5; python_version >= '3.8'",
    "setuptools",
    "wheel",
    "numpy"
]
build-backend = "scikit_build_core.build"

[tool.cibuildwheel]
before-build = [
    "python -c \"import sys, os;\nif sys.version_info < (3, 8): os.remove('pyproject.toml')\"",
    "pip install 'pip<21; python_version <= \"3.8\"' 'pip; python_version > \"3.9\"'",
    "pip install 'setuptools<63; python_version <= \"3.8\"' 'setuptools; python_version > \"3.9\"'",
    "pip install 'wheel<0.35; python_version <= \"3.8\"' 'wheel; python_version > \"3.9\"'",

    # Windows fixes
    "pip install 'delvewheel; system_platform == \"win32\"'",  # Delvewheel used for Windows builds to vendor gfortran libraries
    # "python -c \"import sys, subprocess; sys.exit(0) if sys.platform == 'win32' else 1\" || (echo \"Windows detected - running build_libphsh.bat\" && build_libphsh.bat)",

    # build backends
    "pip install 'numpy>=1.16.6'",  # Legacy NumPy builds
    "pip install 'scikit-build-core>=0.11.5; python_version >= \"3.8\"'",  # Modern CMake builds

    # -- Python 3 to 2 conversion -- #
    # "python -c \"import sys; import platform; sys.exit(0) if sys.version_info >= (3, 8) else 1\" || (echo Legacy Python detected - attempting to transpile code to Python 2.x && pip install future strip-hints && python -m pasteurize -w phaseshifts/**/*.py tests/**/*.py setup.py && python -m strip_hints --inplace phaseshifts/**/*.py tests/**/*.py setup.py)"

]
build = [
    # NOTE: Python 3.9 is the minimum supported version for cibuildwheel v2
    "cp39-*",
    "cp310-*",
    "cp311-*",
    "cp312-*",
    "cp313-*",
]
# output-dir = "dist"  # NOTE: Not supported in config file
skip = [
    "cp38-*",  # FIXME: CPython 3.8 builds fail due to crackfortran issue, see #67
]
test-command = "python -c 'import phaseshifts.lib.libphsh as phsh'"
# test-command = "python -m 'phaseshifts.tools.post_cibuildwheel_check'"
test-extras = ["test"]
test-requires = ["pytest"]

[tool.cibuildwheel.macos]
archs = "arm64"
skip = [
    # NOTE: Python <3.8 is not supported on macOS arm64 (m1 CPU architecture)
    "cp36-*arm64",
    "cp37-*arm64",
]

[tool.cibuildwheel.macos.environment]
CFLAGS="-std=c99 -fno-strict-aliasing"
CC="clang"
FC="gfortran"
CXX="clang++"
CMAKE_OSX_ARCHITECTURES="$CIBW_ARCH"  # Universal2 build
MACOSX_DEPLOYMENT_TARGET = "11.0"  # Minimum supported macOS version for CIBW

[tool.cibuildwheel.windows]
archs = "auto64 auto32"  # Use both 64-bit and 32-bit architectures, typically x86 based on windows-latest runners
repair-wheel-command = [
    # NOTE: delvewheel cannot mangle the libraries, stripping does not work
    # "delvewheel show {wheel} -vv",
    "delvewheel repair -vv -w {dest_dir} {wheel}",
    # "delvewheel repair -vv -w {dest_dir} {wheel} --no-mangle-all --ignore-in-wheel"
]

[tool.cibuildwheel.windows.environment]
# Only support fortran via GCC toolchain, so make explicit 
CC="gcc"
CXX="g++"
FC="gfortran"
CMAKE_GENERATOR="Ninja"  # Use Ninja for faster builds

[tool.flake8]
max-line-length = 120
extend-ignore = "E203, E501, W503"

[tool.mypy]
python_version = "3.8"
ignore_missing_imports = true
follow_imports = "skip"
show_column_numbers = true

[tool.pylint]
disable = "C0114, C0115, C0116"
max-line-length = 120

[tool.ruff]
target-version = "py38"  # 3.8 is minimum
line-length = 120

[tool.scikit-build]
cmake.build-type = "Release"
cmake.args = []
# wheel.install-dir = "phaseshifts"  # previously "phaseshifts/lib"
build.targets = ["libphsh"]
# Only install CMake Runtime components (the compiled extension)
install.components = ["Runtime"]
# Completely disable automatic data file discovery and MANIFEST.in processing
experimental = true
wheel.packages = ["phaseshifts"]
# Override source discovery to ignore MANIFEST.in
build-dir = "build"
# Exclude ALL non-essential files from wheels
wheel.exclude = [
    "*.txt", "*.md", "*.rst", "*.yaml", "*.yml", "*.png", "*.pdf",
    "docs/**", "htmlcov/**", "test/**", "tests/**",
    "dockerfiles/**", "*.ipynb", "*.json", "*.xml", "*.bat", "*.sh",
    "MANIFEST.in", "*.cfg", "Makefile", "CMakeLists.txt", "setup.py", "setup.cfg",
    "ChangeLog", "LICENSE.txt", "TODO.rst", "requirements*.txt", "*.lock"
]
sdist.exclude = [
    "htmlcov/**", "*.png", "*.pdf", "docs/_build/**",
    "test/**/__pycache__/**", "tests/**/__pycache__/**"
]

[tool.phaseshifts.wheel_check]
script = "python phaseshifts/tools/post_cibuildwheel_check.py"
description = """
After building wheels (e.g. with 'make wheel' or 'make build'), run the wheel check script to verify binary wheels contain the Fortran extension and are importable.
This is the default check for all modern builds. Legacy wheel checks are handled separately in the Makefile and CI.
"""
