# Crudely test the phaseshifts package, checking:
#
#   1. Dependencies install
#   2. Package builds (notably compiling libphsh.f using f2py)
#   3. Run python software tests

# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Test Package

on:
  push:
    branches: ["master"]
    paths:
      - phaseshifts/*
      - tests/*
      - setup.py
      - requirements*.txt
      - Makefile
      - MANIFEST.in
      - "**/*.py"
  pull_request:
    branches: ["master"]
    paths:
      - phaseshifts/*
      - tests/*
      - setup.py
      - requirements*.txt
      - Makefile
      - MANIFEST.in
      - "**/*.py"

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest
          - windows-latest # TODO: Needs #32 to be resolved
          # - macos-latest
        python-version:
          # NOTE: 2.7 through to 3.7 inclusive are not provided in the ubuntu-latest runner
          # - "3.8"  # This version has issues with the build, but is not officially supported anyway
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest pytest-cov
          pip install -r requirements.txt
          # Install build dependencies
          pip install setuptools wheel numpy

      # Windows-specific dependencies
      - name: Install Windows build dependencies
        if: matrix.os == 'windows-latest'
        run: |
          # Install additional Windows-specific build tools
          pip install setuptools-scm scikit-build scikit-build-core cmake
        shell: bash

      # Windows-specific setup for Fortran compilation
      - name: Setup Windows Fortran compiler
        if: matrix.os == 'windows-latest'
        run: |
          # Install MinGW-w64 for consistent gcc/gfortran toolchain
          choco install mingw --force
          # Add to PATH (both possible locations)
          echo "C:\tools\mingw64\bin" >> $GITHUB_PATH
          echo "C:\mingw64\bin" >> $GITHUB_PATH
          # Verify installation and PATH
          echo "PATH: $PATH"
          where gcc
          where gfortran
          gcc --version
          gfortran --version
        shell: bash

      # NOTE: There are some limitations with Windows builds needing to be visited in #32
      - name: Install Microsoft Visual C++ Redistributables
        if: matrix.os == 'windows-latest'
        run: |
          Install-Module -Name "VcRedist" -Force
        shell: pwsh

      - name: Find python DLL path for MinGW
        if: matrix.os == 'windows-latest'
        id: find_py_dll
        shell: pwsh
        run: |
          # Determine the DLL name (e.g. python311.dll) using the *current* Python runtime
          python - << 'PY'
          import os, sys, pathlib
          dll_name = f"python{sys.version_info.major}{sys.version_info.minor}.dll"
          search_root = pathlib.Path(sys.base_prefix)
          dll_path = next(search_root.rglob(dll_name), None)
          with open(os.environ["GITHUB_ENV"], "a") as fh:
              if dll_path:
                  fh.write(f"DLLPATH={dll_path}\n")
                  fh.write("MINGW_SUCCESS=true\n")
                  print(f"Found {dll_path}")
              else:
                  fh.write("MINGW_SUCCESS=false\n")
                  print(f"::warning ::{dll_name} not found – MinGW setup will fall back to MSVC")
          PY

      - name: (DISABLED) Generate python import library for MSVC
        if: false # change to 'true' to enable
        shell: pwsh
        run: |
          python - << 'PY'
          import os, sys, pathlib, subprocess, shutil
          maj, min = sys.version_info[:2]
          dll_name = f"python{maj}{min}.dll"
          dll_path = next(pathlib.Path(sys.base_prefix).rglob(dll_name), None)
          if not dll_path:
              print(f"{dll_name} not found – skipping import library generation")
              raise SystemExit(0)
          lib_name = f"python{maj}{min}.lib"
          print(f"Generating {lib_name} from {dll_path} …")
          # Requires the MSVC 'lib' tool in PATH
          subprocess.check_call(["lib", f"/def:{dll_path}", f"/name:{dll_name}", f"/out:{lib_name}", "/machine:x64"])
          target = pathlib.Path(r"C:\msys64\mingw64\lib") / lib_name
          shutil.move(lib_name, target)
          print(f"Wrote {target}")
          PY

      - name: Generate MinGW python defs
        if: matrix.os == 'windows-latest'
        continue-on-error: true
        id: mingw_setup
        run: |
          set PYVER=%PYTHON_VERSION:.=%
          "C:\Python%PYVER%\python.exe" -m pip install pexports
          if not defined DLLPATH (
            echo "::warning ::DLLPATH not set, skipping pexports/dlltool. MinGW setup failed."
            echo "MINGW_SUCCESS=false" >> %GITHUB_ENV%
            exit /b 1
          )
          pexports "%DLLPATH%" > python.def
          dlltool -d python.def -l libpython.dll.a -k
          if exist libpython.dll.a (
            move libpython.dll.a C:\msys64\mingw64\lib
            echo "MINGW_SUCCESS=true" >> %GITHUB_ENV%
            echo "MinGW setup completed successfully"
          ) else (
            echo "::warning ::Failed to generate libpython.dll.a"
            echo "MINGW_SUCCESS=false" >> %GITHUB_ENV%
            exit /b 1
          )
        shell: cmd

      - name: Setup MSVC if MinGW failed
        if: matrix.os == 'windows-latest' && env.MINGW_SUCCESS == 'false'
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Build binaries (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Python version: $(python --version)"

          # Check if MinGW setup was successful
          if [ "$MINGW_SUCCESS" = "true" ]; then
            echo "Using MinGW/GCC toolchain for build..."
            echo "GCC version: $(gcc --version | head -1)"
            echo "Gfortran version: $(gfortran --version | head -1)"
            echo "CMake version: $(cmake --version | head -1)"
            # Set CMake generator and compilers for MinGW
            export CMAKE_GENERATOR="MinGW Makefiles"
            export CMAKE_C_COMPILER=gcc
            export CMAKE_Fortran_COMPILER=gfortran
            export CC=gcc
            export FC=gfortran
          else
            echo "MinGW setup failed, falling back to MSVC toolchain..."
            # Use MSVC compiler
            export CMAKE_GENERATOR="Visual Studio 17 2022"
            # Note: For Fortran, you might need Intel Fortran or other MSVC-compatible Fortran compiler
            echo "Warning: MSVC doesn't include a Fortran compiler. Consider Intel Fortran or other alternatives."
            unset CC
            unset FC
          fi

          make
        shell: bash
        env:
          PYTHON: python

      - name: Build binaries (Unix)
        if: matrix.os != 'windows-latest'
        run: make
        shell: bash
        env:
          PYTHON: python
      - name: Lint with flake8
        continue-on-error: true
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest tests/
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage.xml
