# Crudely test the phaseshifts package, checking:
#
#   1. Dependencies install
#   2. Package builds (notably compiling libphsh.f using f2py)
#   3. Run python software tests

# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Test Package

on:
  push:
    branches: ["master"]
    paths:
      - phaseshifts/*
      - tests/*
      - setup.py
      - requirements*.txt
      - Makefile
      - MANIFEST.in
      - "**/*.py"
  pull_request:
    branches: ["master"]
    paths:
      - phaseshifts/*
      - tests/*
      - setup.py
      - requirements*.txt
      - Makefile
      - MANIFEST.in
      - "**/*.py"

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu-latest
          - windows-latest  # TODO: Needs #32 to be resolved
          # - macos-latest
        python-version:
          # NOTE: 2.7 through to 3.7 inclusive are not provided in the ubuntu-latest runner
          # - "3.8"  # This version has issues with the build, but is not officially supported anyway
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest pytest-cov
          pip install -r requirements.txt
          # Install build dependencies
          pip install setuptools wheel numpy

      # Windows-specific dependencies
      - name: Install Windows build dependencies
        if: matrix.os == 'windows-latest'
        run: |
          # Install additional Windows-specific build tools
          pip install setuptools-scm
        shell: bash

      # Windows-specific setup for Fortran compilation
      - name: Setup Windows Fortran compiler
        if: matrix.os == 'windows-latest'
        run: |
          # Install MinGW-w64 for consistent gcc/gfortran toolchain
          choco install mingw --force
          # Add to PATH
          echo "C:\tools\mingw64\bin" >> $GITHUB_PATH
          # Verify installation
          gcc --version
          gfortran --version
        shell: bash

      # NOTE: There are some limitations with Windows builds needing to be visited in #32
      - name: Install Microsoft Visual C++ Redistributables
        if: matrix.os == 'windows-latest'
        run: |
          Install-Module -Name "VcRedist" -Force
        shell: pwsh

      - name: Build binaries (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Use setup.py for Windows to avoid CMake toolchain issues
          echo "Building with setup.py on Windows..."
          echo "Python version: $(python --version)"
          echo "GCC version: $(gcc --version | head -1)"
          echo "Gfortran version: $(gfortran --version | head -1)"
          make libphsh
        shell: bash
        env:
          CC: gcc
          FC: gfortran
          PYTHON: python
          # Disable CMake for Windows builds
          DISABLE_CMAKE: 1

      - name: Build binaries (Unix)
        if: matrix.os != 'windows-latest'
        run: make
        shell: bash
        env:
          PYTHON: python
      - name: Lint with flake8
        continue-on-error: true
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest tests/
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage.xml
