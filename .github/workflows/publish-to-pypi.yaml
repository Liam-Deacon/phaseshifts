---
name: Publish Package

on:
  release: {}
  workflow_dispatch:
    inputs:
      version:
        description: Version to upload
        default: ""
      pypi_repo:
        description: PyPI Repo
        type: choice
        options:
          - pypi
          - testpypi
        default: testpypi
        required: true
      build_legacy:
        description: Build legacy wheels
        default: true
        type: boolean
      build_manylinux:
        description: Build manylinux wheels
        default: true
        type: boolean
      build_musllinux:
        description: Build musllinux wheels
        default: false
        type: boolean
      build_aarch64:
        description: Build aarch64 wheels
        default: true
        type: boolean
      build_i686:
        description: Build i686 wheels
        default: true
        type: boolean

env:
  CIBW_BEFORE_BUILD: pip install numpy 'scikit-build-core; python_version > "3.7"'
  CIBW_BEFORE_BUILD_LINUX: pip install numpy 'scikit-build-core; python_version > "3.7"'
  CIBW_BEFORE_BUILD_MUSLLINUX: >-
    apk add --no-cache python3-dev && pip install numpy 'scikit-build-core; python_version > "3.7"'
  CIBW_ENVIRONMENT_PASS_LINUX: PHASESHIFTS_VERSION
  CIBW_TEST_EXTRAS: ""
  CIBW_TEST_REQUIRES: ""
  MACOSX_DEPLOYMENT_TARGET: "11.0"
  PHASESHIFTS_VERSION: ${{ github.event.inputs.version }}

permissions:
  contents: read

jobs:
  build_sdist:
    name: Build Source Dist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      # TODO: Figure out how to create a sdist zip for Windows
      - name: Build sdist
        run: |
          make install-deps && \
          pip install build && \
          python -m build --sdist --no-isolation
        shell: bash
        env:
          PHASESHIFTS_VERSION: ${{ github.event.inputs.version }}
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/

  build_legacy_wheels_linux:
    name: Build Legacy Linux Wheels
    runs-on: ubuntu-latest
    needs: build_sdist
    if: ${{ github.event.inputs.build_legacy || github.event_name != 'release' }}
    env:
      # Anything that prevents scikit-build being importable works
      PIP_USE_PEP517: "0"
      PIP_NO_BUILD_ISOLATION: "1" # skip auto-install of build back-ends
      SKBUILD_DISABLE: "1" # scikit-build honour this
    steps:
      - uses: actions/checkout@v4
      # TODO: Remove when we drop support for older python versions
      - name: Build legacy wheels
        uses: pypa/cibuildwheel@v1.12.0
        with:
          output-dir: dist/
        env:
          CIBW_ARCHS_LINUX: x86_64 ${{ (github.event.inputs.build_i686 || github.event_name != 'release') && 'i686' || '' }}
          CIBW_BUILD: cp27-* cp35-* cp36-* cp37-* cp38-* cp39-* cp310-* cp311-*
          CIBW_SKIP: cp38-* cp39-* cp312-* cp313-* # Known issue with CPyton 3.8, see #67
      - uses: actions/upload-artifact@v4
        with:
          name: linux-legacy
          path: dist/

  build_wheels_linux_x86_64:
    name: Build Linux x86_64 Wheels
    runs-on: ubuntu-latest
    needs: build_sdist
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.18.0
        with:
          output-dir: dist/
        env:
          CIBW_SKIP: cp38-* cp39-* cp310-* cp311-* cp*musl*
      - uses: actions/upload-artifact@v4
        with:
          name: linux-x86_64
          path: dist/

  build_wheels_linux_aarch64:
    name: Build Linux aarch64 Wheels
    runs-on: ubuntu-latest
    needs: build_sdist
    if: ${{ github.event.inputs.build_aarch64 || github.event_name == 'release' }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.18.0
        with:
          output-dir: dist/
        env:
          CIBW_ARCHS_LINUX: aarch64
          CIBW_SKIP: cp38-* cp*musl* cp37-musllinux_aarch64
      - uses: actions/upload-artifact@v4
        with:
          name: linux-aarch64
          path: dist/

  build_wheels_macos:
    name: Build Mac Wheels
    runs-on: macos-latest
    needs: build_sdist
    steps:
      - uses: actions/checkout@v4
      # https://github.com/AntoineD/pdfo/blob/f6a45b3921807ad99a438f65ee2b01fa193038bb/.github/workflows/build_wheels.yml#L14C1-L23C1
      - name: Setup Fortran (gfortran)
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: gcc
          version: 13
        # This sets up gfortran and gcc for macOS runners
        # FC, CC, and CXX environment variables will be set for subsequent steps
        # See https://github.com/fortran-lang/setup-fortran for details
      - name: Build x86_64 wheels
        uses: pypa/cibuildwheel@v2.16.2
        continue-on-error: true
        with:
          output-dir: dist/
        env:
          CIBW_ARCHS_MACOS: x86_64
      - name: Build arm64 wheels
        uses: pypa/cibuildwheel@v2.16.2
        with:
          output-dir: dist/
        env:
          CIBW_ARCHS_MACOS: arm64
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
      - uses: actions/upload-artifact@v4
        with:
          name: macos
          path: dist/

  build_legacy_wheels_windows:
    name: Build Legacy Windows Wheels
    runs-on: windows-latest
    needs: build_sdist
    env:
      CIBW_TEST_COMMAND: "" # FIXME: This is a workaround for an issue with DLL loading on Windows
      PIP_USE_PEP517: "0"
      PIP_NO_BUILD_ISOLATION: "1" # skip auto-install of build back-ends
      SKBUILD_DISABLE: "1" # scikit-build honour this
    steps:
      - uses: actions/checkout@v4

      - name: Tell distutils to use mingw (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "[build]`ncompiler=mingw32" | Out-File -Encoding ASCII ~/pydistutils.cfg

      - name: Build legacy wheels
        uses: pypa/cibuildwheel@v1.12.0
        with:
          output-dir: dist/
        env:
          CIBW_BUILD: cp27-* cp35-*
        continue-on-error: true

      - uses: actions/upload-artifact@v4
        with:
          name: windows-legacy
          path: dist/

  build_wheels_windows:
    name: Build Windows Wheels
    runs-on: windows-latest
    needs: build_sdist
    env:
      CIBW_BEFORE_BUILD: pip install delvewheel numpy && build_libphsh.bat
      CIBW_TEST_COMMAND: "" # FIXME: This is a workaround for an issue with DLL loading on Windows
    steps:
      - uses: actions/checkout@v4

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.18.0
        with:
          output-dir: dist/
      - uses: actions/upload-artifact@v4
        with:
          name: windows
          path: dist/

  publish_to_testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    if: ${{ always() && (github.event_name != 'release' && github.event.inputs.pypi_repo == 'testpypi') }}
    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing
    needs:
      - build_sdist
      - build_legacy_wheels_linux
      - build_legacy_wheels_windows
      - build_wheels_linux_aarch64
      - build_wheels_linux_x86_64
      - build_wheels_macos
      - build_wheels_windows
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Publish package artifacts to TestPyPI
        uses: pypa/gh-action-pypi-publish@v1.8.5
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          skip_existing: true

  publish_to_pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    if: ${{ always() && (github.event.inputs.pypi_repo == 'pypi' || github.event_name == 'release') }}
    permissions:
      id-token: write # IMPORTANT: this permission is mandatory for trusted publishing
    needs:
      - build_sdist
      - build_legacy_wheels_linux
      - build_legacy_wheels_windows
      - build_wheels_linux_aarch64
      - build_wheels_linux_x86_64
      - build_wheels_macos
      - build_wheels_windows
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Publish artifacts to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          print-hash: true
          verbose: true

  publish_release_artifacts:
    name: Upload release artifacts
    runs-on: ubuntu-latest
    if: ${{ always() && github.event_name == 'release' }}
    permissions:
      contents: write
    needs:
      - build_sdist
      - build_legacy_wheels_linux
      - build_legacy_wheels_windows
      - build_wheels_linux_aarch64
      - build_wheels_linux_x86_64
      - build_wheels_macos
      - build_wheels_windows
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Upload wheels
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./dist/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
