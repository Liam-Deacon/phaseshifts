# This references the default Python container from
# the Docker Hub with the 2.7 tag:
# https://registry.hub.docker.com/_/python/
# If you want to use a slim Python container with
# version 3.4.3 you would use: python:3.4-slim
# If you want Google's container you would reference google/python
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: ubuntu
# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongo
    # http://devcenter.wercker.com/docs/services/mongodb.html

# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html
build:
  # The steps that will be executed on build
  # Steps make up the actions in your pipeline
  # Read more about steps on our dev center:
  # http://devcenter.wercker.com/docs/steps/index.html
  steps:
  # A step that installs dependencies
    - script: 
        name: install dependencies
        code: |
            sudo sed 's/main$/main universe/' -i /etc/apt/sources.list
            sudo apt-get update -y
            sudo apt-get install software-properties-common python-software-properties -y
            sudo add-apt-repository ppa:fkrull/deadsnakes -y
            sudo apt-get update -y
            sudo apt-get install gfortran python-dev build-essential cython cython3 -y
            sudo apt-get install python-scipy virtualenv python2.7 python3.5 -y
  
    # A step that sets up the python virtual environment
    - virtualenv:
        name: setup virtual environment
        install_wheel: false # Enable wheel to speed up builds (experimental)

    # # Use this virtualenv step for python 3.2
    # - virtualenv
    #     name: setup virtual environment
    #     python_location: /usr/bin/python3.2

    # A step that executes `pip install` command.
    - pip-install:
        requirements_file: "requirements.txt"
        packages_list: "mock coverage pytest pytest-cov python-coveralls codacy-coverage radon pylint hacking flake8 mastool"

    # # This pip-install clears the local wheel cache
    # - pip-install:
    #     clean_wheel_dir: true

    # A custom script step, name value is used in the UI
    # and the code value contains the command that get executed
    - script:
        name: build phaseshifts
        code: |
          python setup.py build bdist bdist_wheel

# perform test pipeline
test:
  steps:
    - script:
       name: perform coveralls coverage analysis
       code: |
          export COVERALLS_REPO_TOKEN=
          py.test coveralls/tests.py --doctest-modules --pep8 coveralls -v --cov coveralls --cov-report term-missing
          coveralls
  
    - script:
        name: collect codacy coverage
        code: |
          export CODACY_PROJECT_TOKEN=721355d1f5e5403fb60bf36ebb797a13
          ls
          pwd
          coverage xml *.py
          python-codacy-coverage -r coverage.xml

# perform deployment pipeline
deploy:
  steps:
      - script:
         name: deploy phaseshifts
         code: |
            python setup.py install

# create documentation
doc:
   steps:
      - script:
         name: create documentation
         code: |
            cd phaseshifts/doc
            make
